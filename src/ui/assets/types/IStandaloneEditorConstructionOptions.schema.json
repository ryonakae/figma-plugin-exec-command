{
  "type": "object",
  "properties": {
    "acceptSuggestionOnCommitCharacter": {
      "description": "Accept suggestions on provider defined characters.\nDefaults to true.",
      "type": "boolean"
    },
    "acceptSuggestionOnEnter": {
      "description": "Accept suggestions on ENTER.\nDefaults to 'on'.",
      "enum": ["off", "on", "smart"],
      "type": "string"
    },
    "accessibilityHelpUrl": {
      "description": "An URL to open when Ctrl+H (Windows and Linux) or Cmd+H (OSX) is pressed in\nthe accessibility help dialog in the editor.\n\nDefaults to \"https://go.microsoft.com/fwlink/?linkid=852450\"",
      "type": "string"
    },
    "accessibilityPageSize": {
      "description": "Controls the number of lines in the editor that can be read out by a screen reader",
      "type": "number"
    },
    "accessibilitySupport": {
      "description": "Configure the editor's accessibility support.\nDefaults to 'auto'. It is best to leave this to 'auto'.",
      "enum": ["auto", "off", "on"],
      "type": "string"
    },
    "ariaContainerElement": {
      "$ref": "#/definitions/HTMLElement",
      "description": "Container element to use for ARIA messages.\nDefaults to document.body."
    },
    "ariaLabel": {
      "description": "The aria label for the editor's textarea (when it is focused).",
      "type": "string"
    },
    "autoClosingBrackets": {
      "$ref": "#/definitions/editor.EditorAutoClosingStrategy",
      "description": "Options for auto closing brackets.\nDefaults to language defined behavior."
    },
    "autoClosingDelete": {
      "$ref": "#/definitions/editor.EditorAutoClosingEditStrategy",
      "description": "Options for pressing backspace near quotes or bracket pairs."
    },
    "autoClosingOvertype": {
      "$ref": "#/definitions/editor.EditorAutoClosingEditStrategy",
      "description": "Options for typing over closing quotes or brackets."
    },
    "autoClosingQuotes": {
      "$ref": "#/definitions/editor.EditorAutoClosingStrategy",
      "description": "Options for auto closing quotes.\nDefaults to language defined behavior."
    },
    "autoDetectHighContrast": {
      "description": "If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\nDefaults to true.",
      "type": "boolean"
    },
    "autoIndent": {
      "description": "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.\nDefaults to advanced.",
      "enum": ["advanced", "brackets", "full", "keep", "none"],
      "type": "string"
    },
    "autoSurround": {
      "$ref": "#/definitions/editor.EditorAutoSurroundStrategy",
      "description": "Options for auto surrounding.\nDefaults to always allowing auto surrounding."
    },
    "automaticLayout": {
      "description": "Enable that the editor will install an interval to check if its container dom node size has changed.\nEnabling this might have a severe performance impact.\nDefaults to false.",
      "type": "boolean"
    },
    "codeActionsOnSaveTimeout": {
      "description": "Timeout for running code actions on save.",
      "type": "number"
    },
    "codeLens": {
      "description": "Show code lens\nDefaults to true.",
      "type": "boolean"
    },
    "codeLensFontFamily": {
      "description": "Code lens font family. Defaults to editor font family.",
      "type": "string"
    },
    "codeLensFontSize": {
      "description": "Code lens font size. Default to 90% of the editor font size",
      "type": "number"
    },
    "colorDecorators": {
      "description": "Enable inline color decorators and color picker rendering.",
      "type": "boolean"
    },
    "columnSelection": {
      "description": "Enable that the selection with the mouse and keys is doing column selection.\nDefaults to false.",
      "type": "boolean"
    },
    "comments": {
      "$ref": "#/definitions/editor.IEditorCommentsOptions",
      "description": "Control the behaviour of comments in the editor."
    },
    "contextmenu": {
      "description": "Enable custom contextmenu.\nDefaults to true.",
      "type": "boolean"
    },
    "copyWithSyntaxHighlighting": {
      "description": "Syntax highlighting is copied.",
      "type": "boolean"
    },
    "cursorBlinking": {
      "description": "Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'.\nDefaults to 'blink'.",
      "enum": ["blink", "expand", "phase", "smooth", "solid"],
      "type": "string"
    },
    "cursorSmoothCaretAnimation": {
      "description": "Enable smooth caret animation.\nDefaults to false.",
      "type": "boolean"
    },
    "cursorStyle": {
      "description": "Control the cursor style, either 'block' or 'line'.\nDefaults to 'line'.",
      "enum": [
        "block",
        "block-outline",
        "line",
        "line-thin",
        "underline",
        "underline-thin"
      ],
      "type": "string"
    },
    "cursorSurroundingLines": {
      "description": "Controls the minimal number of visible leading and trailing lines surrounding the cursor.\nDefaults to 0.",
      "type": "number"
    },
    "cursorSurroundingLinesStyle": {
      "description": "Controls when `cursorSurroundingLines` should be enforced\nDefaults to `default`, `cursorSurroundingLines` is not enforced when cursor position is changed\nby mouse.",
      "enum": ["all", "default"],
      "type": "string"
    },
    "cursorWidth": {
      "description": "Control the width of the cursor when cursorStyle is set to 'line'",
      "type": "number"
    },
    "definitionLinkOpensInPeek": {
      "description": "Controls whether the definition link opens element in the peek widget.\nDefaults to false.",
      "type": "boolean"
    },
    "detectIndentation": {
      "description": "Controls whether `tabSize` and `insertSpaces` will be automatically detected when a file is opened based on the file contents.\nDefaults to true.",
      "type": "boolean"
    },
    "dimension": {
      "$ref": "#/definitions/editor.IDimension",
      "description": "The initial editor dimension (to avoid measuring the container)."
    },
    "disableLayerHinting": {
      "description": "Disable the use of `transform: translate3d(0px, 0px, 0px)` for the editor margin and lines layers.\nThe usage of `transform: translate3d(0px, 0px, 0px)` acts as a hint for browsers to create an extra layer.\nDefaults to false.",
      "type": "boolean"
    },
    "disableMonospaceOptimizations": {
      "description": "Disable the optimizations for monospace fonts.\nDefaults to false.",
      "type": "boolean"
    },
    "domReadOnly": {
      "description": "Should the textarea used for input use the DOM `readonly` attribute.\nDefaults to false.",
      "type": "boolean"
    },
    "dragAndDrop": {
      "description": "Controls if the editor should allow to move selections via drag and drop.\nDefaults to false.",
      "type": "boolean"
    },
    "emptySelectionClipboard": {
      "description": "Copying without a selection copies the current line.",
      "type": "boolean"
    },
    "extraEditorClassName": {
      "description": "Class name to be added to the editor.",
      "type": "string"
    },
    "fastScrollSensitivity": {
      "description": "FastScrolling mulitplier speed when pressing `Alt`\nDefaults to 5.",
      "type": "number"
    },
    "find": {
      "$ref": "#/definitions/editor.IEditorFindOptions",
      "description": "Control the behavior of the find widget."
    },
    "fixedOverflowWidgets": {
      "description": "Display overflow widgets as `fixed`.\nDefaults to `false`.",
      "type": "boolean"
    },
    "folding": {
      "description": "Enable code folding.\nDefaults to true.",
      "type": "boolean"
    },
    "foldingHighlight": {
      "description": "Enable highlight for folded regions.\nDefaults to true.",
      "type": "boolean"
    },
    "foldingImportsByDefault": {
      "description": "Auto fold imports folding regions.\nDefaults to true.",
      "type": "boolean"
    },
    "foldingStrategy": {
      "description": "Selects the folding strategy. 'auto' uses the strategies contributed for the current document, 'indentation' uses the indentation based folding strategy.\nDefaults to 'auto'.",
      "enum": ["auto", "indentation"],
      "type": "string"
    },
    "fontFamily": {
      "description": "The font family",
      "type": "string"
    },
    "fontLigatures": {
      "description": "Enable font ligatures.\nDefaults to false.",
      "type": ["string", "boolean"]
    },
    "fontSize": {
      "description": "The font size",
      "type": "number"
    },
    "fontWeight": {
      "description": "The font weight",
      "type": "string"
    },
    "formatOnPaste": {
      "description": "Enable format on paste.\nDefaults to false.",
      "type": "boolean"
    },
    "formatOnType": {
      "description": "Enable format on type.\nDefaults to false.",
      "type": "boolean"
    },
    "glyphMargin": {
      "description": "Enable the rendering of the glyph margin.\nDefaults to true in vscode and to false in monaco-editor.",
      "type": "boolean"
    },
    "gotoLocation": {
      "$ref": "#/definitions/editor.IGotoLocationOptions"
    },
    "guides": {
      "$ref": "#/definitions/editor.IGuidesOptions",
      "description": "Controls the behavior of editor guides."
    },
    "hideCursorInOverviewRuler": {
      "description": "Should the cursor be hidden in the overview ruler.\nDefaults to false.",
      "type": "boolean"
    },
    "hover": {
      "$ref": "#/definitions/editor.IEditorHoverOptions",
      "description": "Configure the editor's hover."
    },
    "inDiffEditor": {
      "description": "This editor is used inside a diff editor.",
      "type": "boolean"
    },
    "inlayHints": {
      "$ref": "#/definitions/editor.IEditorInlayHintsOptions",
      "description": "Control the behavior and rendering of the inline hints."
    },
    "inlineSuggest": {
      "$ref": "#/definitions/editor.IInlineSuggestOptions"
    },
    "insertSpaces": {
      "description": "Insert spaces when pressing `Tab`.\nThis setting is overridden based on the file contents when `detectIndentation` is on.\nDefaults to true.",
      "type": "boolean"
    },
    "language": {
      "description": "The initial language of the auto created model in the editor.\nTo not automatically create a model, use `model: null`.",
      "type": "string"
    },
    "largeFileOptimizations": {
      "description": "Special handling for large files to disable certain memory intensive features.\nDefaults to true.",
      "type": "boolean"
    },
    "letterSpacing": {
      "description": "The letter spacing",
      "type": "number"
    },
    "lightbulb": {
      "$ref": "#/definitions/editor.IEditorLightbulbOptions",
      "description": "Control the behavior and rendering of the code action lightbulb."
    },
    "lineDecorationsWidth": {
      "description": "The width reserved for line decorations (in px).\nLine decorations are placed between line numbers and the editor content.\nYou can pass in a string in the format floating point followed by \"ch\". e.g. 1.3ch.\nDefaults to 10.",
      "type": ["string", "number"]
    },
    "lineHeight": {
      "description": "The line height",
      "type": "number"
    },
    "lineNumbers": {
      "anyOf": [
        {
          "enum": ["interval", "off", "on", "relative"],
          "type": "string"
        },
        {
          "type": "object"
        }
      ],
      "description": "Control the rendering of line numbers.\nIf it is a function, it will be invoked when rendering a line number and the return value will be rendered.\nOtherwise, if it is a truthy, line numbers will be rendered normally (equivalent of using an identity function).\nOtherwise, line numbers will not be rendered.\nDefaults to `on`."
    },
    "lineNumbersMinChars": {
      "description": "Control the width of line numbers, by reserving horizontal space for rendering at least an amount of digits.\nDefaults to 5.",
      "type": "number"
    },
    "linkedEditing": {
      "description": "Enable linked editing.\nDefaults to false.",
      "type": "boolean"
    },
    "links": {
      "description": "Enable detecting links and making them clickable.\nDefaults to true.",
      "type": "boolean"
    },
    "matchBrackets": {
      "description": "Enable highlighting of matching brackets.\nDefaults to 'always'.",
      "enum": ["always", "near", "never"],
      "type": "string"
    },
    "maxTokenizationLineLength": {
      "description": "Lines above this length will not be tokenized for performance reasons.\nDefaults to 20000.",
      "type": "number"
    },
    "minimap": {
      "$ref": "#/definitions/editor.IEditorMinimapOptions",
      "description": "Control the behavior and rendering of the minimap."
    },
    "model": {
      "$ref": "#/definitions/editor.ITextModel",
      "description": "The initial model associated with this code editor."
    },
    "mouseStyle": {
      "description": "Control the mouse pointer style, either 'text' or 'default' or 'copy'\nDefaults to 'text'",
      "enum": ["copy", "default", "text"],
      "type": "string"
    },
    "mouseWheelScrollSensitivity": {
      "description": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\nDefaults to 1.",
      "type": "number"
    },
    "mouseWheelZoom": {
      "description": "Zoom the font in the editor when using the mouse wheel in combination with holding Ctrl.\nDefaults to false.",
      "type": "boolean"
    },
    "multiCursorMergeOverlapping": {
      "description": "Merge overlapping selections.\nDefaults to true",
      "type": "boolean"
    },
    "multiCursorModifier": {
      "description": "The modifier to be used to add multiple cursors with the mouse.\nDefaults to 'alt'",
      "enum": ["alt", "ctrlCmd"],
      "type": "string"
    },
    "multiCursorPaste": {
      "description": "Configure the behaviour when pasting a text with the line count equal to the cursor count.\nDefaults to 'spread'.",
      "enum": ["full", "spread"],
      "type": "string"
    },
    "occurrencesHighlight": {
      "description": "Enable semantic occurrences highlight.\nDefaults to true.",
      "type": "boolean"
    },
    "overflowWidgetsDomNode": {
      "$ref": "#/definitions/HTMLElement",
      "description": "Place overflow widgets inside an external DOM node.\nDefaults to an internal DOM node."
    },
    "overviewRulerBorder": {
      "description": "Controls if a border should be drawn around the overview ruler.\nDefaults to `true`.",
      "type": "boolean"
    },
    "overviewRulerLanes": {
      "description": "The number of vertical lanes the overview ruler should render.\nDefaults to 3.",
      "type": "number"
    },
    "padding": {
      "$ref": "#/definitions/editor.IEditorPaddingOptions",
      "description": "Controls the spacing around the editor."
    },
    "parameterHints": {
      "$ref": "#/definitions/editor.IEditorParameterHintOptions",
      "description": "Parameter hint options."
    },
    "peekWidgetDefaultFocus": {
      "description": "Controls whether to focus the inline editor in the peek widget by default.\nDefaults to false.",
      "enum": ["editor", "tree"],
      "type": "string"
    },
    "quickSuggestions": {
      "anyOf": [
        {
          "$ref": "#/definitions/editor.IQuickSuggestionsOptions"
        },
        {
          "type": "boolean"
        }
      ],
      "description": "Enable quick suggestions (shadow suggestions)\nDefaults to true."
    },
    "quickSuggestionsDelay": {
      "description": "Quick suggestions show delay (in ms)\nDefaults to 10 (ms)",
      "type": "number"
    },
    "readOnly": {
      "description": "Should the editor be read only. See also `domReadOnly`.\nDefaults to false.",
      "type": "boolean"
    },
    "renameOnType": {
      "description": "deprecated, use linkedEditing instead",
      "type": "boolean"
    },
    "renderControlCharacters": {
      "description": "Enable rendering of control characters.\nDefaults to true.",
      "type": "boolean"
    },
    "renderFinalNewline": {
      "description": "Render last line number when the file ends with a newline.\nDefaults to true.",
      "type": "boolean"
    },
    "renderLineHighlight": {
      "description": "Enable rendering of current line highlight.\nDefaults to all.",
      "enum": ["all", "gutter", "line", "none"],
      "type": "string"
    },
    "renderLineHighlightOnlyWhenFocus": {
      "description": "Control if the current line highlight should be rendered only the editor is focused.\nDefaults to false.",
      "type": "boolean"
    },
    "renderValidationDecorations": {
      "description": "Should the editor render validation decorations.\nDefaults to editable.",
      "enum": ["editable", "off", "on"],
      "type": "string"
    },
    "renderWhitespace": {
      "description": "Enable rendering of whitespace.\nDefaults to 'selection'.",
      "enum": ["all", "boundary", "none", "selection", "trailing"],
      "type": "string"
    },
    "revealHorizontalRightPadding": {
      "description": "When revealing the cursor, a virtual padding (px) is added to the cursor, turning it into a rectangle.\nThis virtual padding ensures that the cursor gets revealed before hitting the edge of the viewport.\nDefaults to 30 (px).",
      "type": "number"
    },
    "roundedSelection": {
      "description": "Render the editor selection with rounded borders.\nDefaults to true.",
      "type": "boolean"
    },
    "rulers": {
      "description": "Render vertical lines at the specified columns.\nDefaults to empty array.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/editor.IRulerOption"
          },
          {
            "type": "number"
          }
        ]
      },
      "type": "array"
    },
    "scrollBeyondLastColumn": {
      "description": "Enable that scrolling can go beyond the last column by a number of columns.\nDefaults to 5.",
      "type": "number"
    },
    "scrollBeyondLastLine": {
      "description": "Enable that scrolling can go one screen size after the last line.\nDefaults to true.",
      "type": "boolean"
    },
    "scrollPredominantAxis": {
      "description": "Enable that the editor scrolls only the predominant axis. Prevents horizontal drift when scrolling vertically on a trackpad.\nDefaults to true.",
      "type": "boolean"
    },
    "scrollbar": {
      "$ref": "#/definitions/editor.IEditorScrollbarOptions",
      "description": "Control the behavior and rendering of the scrollbars."
    },
    "selectOnLineNumbers": {
      "description": "Should the corresponding line be selected when clicking on the line number?\nDefaults to true.",
      "type": "boolean"
    },
    "selectionClipboard": {
      "description": "Enable Linux primary clipboard.\nDefaults to true.",
      "type": "boolean"
    },
    "selectionHighlight": {
      "description": "Enable selection highlight.\nDefaults to true.",
      "type": "boolean"
    },
    "semanticHighlighting.enabled": {
      "description": "Controls whether the semanticHighlighting is shown for the languages that support it.\ntrue: semanticHighlighting is enabled for all themes\nfalse: semanticHighlighting is disabled for all themes\n'configuredByTheme': semanticHighlighting is controlled by the current color theme's semanticHighlighting setting.\nDefaults to 'byTheme'.",
      "enum": ["configuredByTheme", false, true]
    },
    "showDeprecated": {
      "description": "Controls strikethrough deprecated variables.",
      "type": "boolean"
    },
    "showFoldingControls": {
      "description": "Controls whether the fold actions in the gutter stay always visible or hide unless the mouse is over the gutter.\nDefaults to 'mouseover'.",
      "enum": ["always", "mouseover"],
      "type": "string"
    },
    "showUnused": {
      "description": "Controls fading out of unused variables.",
      "type": "boolean"
    },
    "smartSelect": {
      "$ref": "#/definitions/editor.ISmartSelectOptions",
      "description": "Smart select options."
    },
    "smoothScrolling": {
      "description": "Enable that the editor animates scrolling to a position.\nDefaults to false.",
      "type": "boolean"
    },
    "snippetSuggestions": {
      "description": "Enable snippet suggestions. Default to 'true'.",
      "enum": ["bottom", "inline", "none", "top"],
      "type": "string"
    },
    "stablePeek": {
      "description": "Keep peek editors open even when double clicking their content or when hitting `Escape`.\nDefaults to false.",
      "type": "boolean"
    },
    "stickyTabStops": {
      "description": "Emulate selection behaviour of tab characters when using spaces for indentation.\nThis means selection will stick to tab stops.",
      "type": "boolean"
    },
    "stopRenderingLineAfter": {
      "description": "Performance guard: Stop rendering a line after x characters.\nDefaults to 10000.\nUse -1 to never stop rendering",
      "type": "number"
    },
    "suggest": {
      "$ref": "#/definitions/editor.ISuggestOptions",
      "description": "Suggest options."
    },
    "suggestFontSize": {
      "description": "The font size for the suggest widget.\nDefaults to the editor font size.",
      "type": "number"
    },
    "suggestLineHeight": {
      "description": "The line height for the suggest widget.\nDefaults to the editor line height.",
      "type": "number"
    },
    "suggestOnTriggerCharacters": {
      "description": "Enable the suggestion box to pop-up on trigger characters.\nDefaults to true.",
      "type": "boolean"
    },
    "suggestSelection": {
      "description": "The history mode for suggestions.",
      "enum": ["first", "recentlyUsed", "recentlyUsedByPrefix"],
      "type": "string"
    },
    "tabCompletion": {
      "description": "Enable tab completion.",
      "enum": ["off", "on", "onlySnippets"],
      "type": "string"
    },
    "tabIndex": {
      "description": "The `tabindex` property of the editor's textarea",
      "type": "number"
    },
    "tabSize": {
      "description": "The number of spaces a tab is equal to.\nThis setting is overridden based on the file contents when `detectIndentation` is on.\nDefaults to 4.",
      "type": "number"
    },
    "theme": {
      "description": "Initial theme to be used for rendering.\nThe current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\nYou can create custom themes via `monaco.editor.defineTheme`.\nTo switch a theme, use `monaco.editor.setTheme`.\n**NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.",
      "type": "string"
    },
    "trimAutoWhitespace": {
      "description": "Remove trailing auto inserted whitespace.\nDefaults to true.",
      "type": "boolean"
    },
    "unfoldOnClickAfterEndOfLine": {
      "description": "Controls whether clicking on the empty content after a folded line will unfold the line.\nDefaults to false.",
      "type": "boolean"
    },
    "unicodeHighlight": {
      "$ref": "#/definitions/editor.IUnicodeHighlightOptions"
    },
    "unusualLineTerminators": {
      "description": "Remove unusual line terminators like LINE SEPARATOR (LS), PARAGRAPH SEPARATOR (PS).\nDefaults to 'prompt'.",
      "enum": ["auto", "off", "prompt"],
      "type": "string"
    },
    "useShadowDOM": {
      "description": "Control if the editor should use shadow DOM.",
      "type": "boolean"
    },
    "useTabStops": {
      "description": "Inserting and deleting whitespace follows tab stops.",
      "type": "boolean"
    },
    "value": {
      "description": "The initial value of the auto created model in the editor.\nTo not automatically create a model, use `model: null`.",
      "type": "string"
    },
    "wordBasedSuggestions": {
      "description": "Controls whether completions should be computed based on words in the document.\nDefaults to true.",
      "type": "boolean"
    },
    "wordBasedSuggestionsOnlySameLanguage": {
      "description": "Controls whether word based completions should be included from opened documents of the same language or any language.",
      "type": "boolean"
    },
    "wordSeparators": {
      "description": "A string containing the word separators used when doing word navigation.\nDefaults to `~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?",
      "type": "string"
    },
    "wordWrap": {
      "description": "Control the wrapping of the editor.\nWhen `wordWrap` = \"off\", the lines will never wrap.\nWhen `wordWrap` = \"on\", the lines will wrap at the viewport width.\nWhen `wordWrap` = \"wordWrapColumn\", the lines will wrap at `wordWrapColumn`.\nWhen `wordWrap` = \"bounded\", the lines will wrap at min(viewport width, wordWrapColumn).\nDefaults to \"off\".",
      "enum": ["bounded", "off", "on", "wordWrapColumn"],
      "type": "string"
    },
    "wordWrapBreakAfterCharacters": {
      "description": "Configure word wrapping characters. A break will be introduced after these characters.",
      "type": "string"
    },
    "wordWrapBreakBeforeCharacters": {
      "description": "Configure word wrapping characters. A break will be introduced before these characters.",
      "type": "string"
    },
    "wordWrapColumn": {
      "description": "Control the wrapping of the editor.\nWhen `wordWrap` = \"off\", the lines will never wrap.\nWhen `wordWrap` = \"on\", the lines will wrap at the viewport width.\nWhen `wordWrap` = \"wordWrapColumn\", the lines will wrap at `wordWrapColumn`.\nWhen `wordWrap` = \"bounded\", the lines will wrap at min(viewport width, wordWrapColumn).\nDefaults to 80.",
      "type": "number"
    },
    "wordWrapOverride1": {
      "description": "Override the `wordWrap` setting.",
      "enum": ["inherit", "off", "on"],
      "type": "string"
    },
    "wordWrapOverride2": {
      "description": "Override the `wordWrapOverride1` setting.",
      "enum": ["inherit", "off", "on"],
      "type": "string"
    },
    "wrappingIndent": {
      "description": "Control indentation of wrapped lines. Can be: 'none', 'same', 'indent' or 'deepIndent'.\nDefaults to 'same' in vscode and to 'none' in monaco-editor.",
      "enum": ["deepIndent", "indent", "none", "same"],
      "type": "string"
    },
    "wrappingStrategy": {
      "description": "Controls the wrapping strategy to use.\nDefaults to 'simple'.",
      "enum": ["advanced", "simple"],
      "type": "string"
    }
  }
}
